const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const passport = require("passport");

const { Server } = require("socket.io");

//updating package
const projectVersion = require("./package.json");
const { version: packageVersion } = require("./models/Version");

const fs = require("fs");
const https = require("https");
const path = require("path");
const cors = require("cors");
var publicDir = require("path").join(__dirname, "/public");
var fileUpload = require("express-fileupload");
const cloudinary = require("cloudinary").v2;

require("dotenv").config();

cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.CLOUD_API_KEY,
  api_secret: process.env.CLOUD_API_SECRET,
});
// env
// var appRoot = require("app-root-path");
// var envRoot = appRoot.path.slice(0, 33);
//loggers
const morgan = require("morgan");
const winston = require("./config/winston");
// console.log(envRoot);

// INITIALIZE APP
const app = express();
//USE APP FOR SERVING FILES
// app.use(express.static(publicDir));
// app.use(fileupload());
app.use(fileUpload({ useTempFiles: true }));
app.use(
  express.urlencoded({
    extended: true,
  })
);

// Check environment
const environment = !process.env.NODE_ENV
  ? "development"
  : process.env.NODE_ENV;

// MODELS
require("./models/User");
require("./models/Interview");
require("./models/Candidate");
require("./models/Screener");
require("./models/Admin");
require("./models/Recruiter");
require("./models/myUsers");
// require("./models/Review");

// MIDDLEWARES
// cors

const corsOptions = {
  origin: "https://zstest-dev-ed.my.salesforce.com/",
};

app.use(cors(corsOptions));

app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept"
  );
  if (req.method === "OPTIONS") {
    res.header("Access-Control-Allow-Methods", "PUT, POST, PATCH, DELETE, GET");
    return res.status(200).json({});
  }
  // const error = new Error('Not found');
  // error.status = 200;
  next();
});
// Bodyparser middleware
app.use(
  bodyParser.urlencoded({
    extended: true,
  })
);
app.use(bodyParser.json());
app.use(morgan("combined", { stream: winston.stream }));

// Passport middleware
app.use(passport.initialize());
app.use(passport.session());

// Passport config
require("./config/passport")(passport);
// DB Config
// console.log(environment);
let db = require("./config/keys").mongoURI;

// console.log(process.env);
// comment out in production
console.log(db);

// Connect to MongoDB
mongoose
  .connect(db, {
    useNewUrlParser: true,
    useFindAndModify: false,
    useUnifiedTopology: true,
  })
  .then(() => console.log("MongoDB successfully connected"))
  .catch((err) => console.log(err));

// Routes
const users = require("./routes/api/users");
const auth = require("./routes/api/auth");
const candidateAssessment = require("./routes/api/candidateAssessment");
const availaibility = require("./routes/api/availability");
const application = require("./routes/salesforceApi/application");
// Salesforce Routes
const salesforcePosition = require("./routes/salesforceApi/position");
const salesforceAvailability = require("./routes/salesforceApi/availability");
const salesforceScreener = require("./routes/salesforceApi/screener");
const salesforceInterview = require("./routes/salesforceApi/interview");
const salesforceScreenerRatings = require("./routes/salesforceApi/screenerRatings");

//interview routes
const interviews = require("./routes/api/Interview");

//candidate register route
const candidate = require("./routes/api/candidateRoutes");

//screener register route
const screener = require("./routes/api/screenerRoutes");

//Admin register route
const admin = require("./routes/api/adminRoutes");

//Recruiter route
const recruiter = require("./routes/api/recruiterRoutes");

const version = require("./routes/api/versionRoutes");

const schedule = require("./routes/api/schedule");
//query routes
const query = require("./routes/api/queryRoutes");

//review routes
// const reviews = require("./routes/api/reviews");
const reviews = require("./routes/api/reviews");

const myUsers = require("./routes/api/userRoutes");
// Use Routes
app.use("/api/users", users); // old route
app.use("/api/auth", auth);
app.use("/api/candidateAssessment", candidateAssessment);
app.use("/api/availability", availaibility);
app.use("/api/application", application);

app.use("/api/event", interviews);

app.use("/api/candidate", candidate);
app.use("/api/screener", screener);
app.use("/api/admin", admin);
app.use("/api/recruiter", recruiter);
app.use("/api/version", version);
app.use("/api/contact", query);
app.use("/api/myUsers", myUsers);
app.use("/api/schedule", schedule);
// app.use("/api/review",reviews);
app.use("/api/review", reviews);

// salesforce use routes
app.use("/salesforce/position", salesforcePosition);
app.use("/salesforce/availability", salesforceAvailability);
app.use("/salesforce/screener", salesforceScreener);
app.use("/salesforce/interview", salesforceInterview);
app.use("/salesforce/screenerRating", salesforceScreenerRatings);

const httpsOption = {
  cert: fs.readFileSync(path.join(__dirname, "ssl", "server.crt")),
  key: fs.readFileSync(path.join(__dirname, "ssl", "server.key")),
};

const port = process.env.PORT || 5000;
const server = https
  .createServer(httpsOption, app)
  .listen(port, () => console.log(`Server up and running on port ${port} !`));

// console.log(server, "SERVER")

const io = new Server(server);

// Socket.IO connection handler
io.on("connection", (socket) => {
  console.log("A user connected");

  // Listen for chat messages
  // socket.on(' message', (msg) => {
  //   console.log('message: ' + msg);
  //   // Broadcast message to all connected clients
  //   io.emit('chat message', msg);
  // });

  // Handle disconnect
  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

const updateVersion = async () => {
  const response = await packageVersion.find({});

  if (response.length) {
    await packageVersion.findOneAndUpdate(
      {
        _id: response[0]._id,
      },
      { version: projectVersion.version }
    );
    console.log("Successfully changed the version");
    // process.exit()
  }

  // await version.updateOne({
  //     _id: '6437ca276d9840620774c7e4'
  // },
  //     {
  //         $set: {
  //             version: projectVersion.version
  //         }
  //     })
  else {
    console.log("Error, version doc is empty");
  }
  // process.exit()
};

updateVersion();

// app.listen(port, () => console.log(`Server up and running on port ${port} !`));
